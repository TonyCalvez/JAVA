@startuml

title __IMPLEMENTATION's Class Diagram__\n

  namespace enstabretagne.simulation.components {
    namespace implementation {
      class enstabretagne.simulation.components.implementation.ScenariiSettings {
          + germeInitial : long
          + nbRepliques : long
          + scenarioInstanceClassNames : List<String>
          {static} + settings : ScenariiSettings
          {static} - scenariiSettingsFileName : String
          + ScenariiSettings()
      }
    }
  }
  

  namespace enstabretagne.simulation.components {
    namespace implementation {
      abstract class enstabretagne.simulation.components.implementation.SimEntity {
          {static} ~ OnCreated : List<CreationNotification>
          {static} ~ OnCreating : List<CreationNotification>
          ~ children : List<SimEntity>
          - OnActivated : List<ActivationNotification>
          - OnActivating : List<ActivationNotification>
          - OnDeactivated : List<DeactivationNotification>
          - OnDeactivating : List<DeactivationNotification>
          - OnInitialized : List<InitializationNotification>
          - OnInitializing : List<InitializationNotification>
          - OnTerminated : List<TerminatingNotification>
          - OnTerminating : List<TerminatingNotification>
          + IsActive()
          + IsAlive()
          + OnActivated()
          + OnActivating()
          + OnCreated()
          + OnCreating()
          + OnDeactivated()
          + OnDeactivating()
          + OnInitialized()
          + OnInitializing()
          + OnTerminating()
          + RandomGenerator()
          + SimEntity()
          + activate()
          {abstract} + canSeeTable()
          + deactivate()
          + getChildren()
          + getCurrentTransition()
          + getFullName()
          + getParent()
          + getStatus()
          + getSubEntitiesImplementing()
          + initialize()
          {abstract} + onParentSet()
          + setEngine()
          + setName()
          + setParent()
          + terminate()
          {abstract} # AfterActivate()
          {abstract} # AfterDeactivated()
          {abstract} # AfterTerminated()
          {abstract} # BeforeActivating()
          {abstract} # BeforeDeactivating()
          # BeforeTerminating()
          # createChild()
          # getFeatures()
          # getInitParameters()
          {abstract} # initializeSimEntity()
          # setCurrentTransition()
          # setStatus()
      }
    }
  }
  

  namespace enstabretagne.simulation.components {
    namespace implementation {
      class enstabretagne.simulation.components.implementation.SimEntity.EntityStatus {
          {static} + ACTIVE : EntityStatus
          {static} + BORN : EntityStatus
          {static} + DEAD : EntityStatus
          {static} + HELD : EntityStatus
          {static} + IDLE : EntityStatus
          {static} + NONE : EntityStatus
          - entityStatus : int
          + EntityStatus()
          + entityStatus()
          + equals()
          + exist()
          + isALIVE()
          + isBUSY()
      }
    }
  }
  

  namespace enstabretagne.simulation.components {
    namespace implementation {
      class enstabretagne.simulation.components.implementation.SimEntity.EntityTransition {
          {static} + ACTIVATE : EntityTransition
          {static} + CREATE : EntityTransition
          {static} + DEACTIVATE : EntityTransition
          {static} + INIT : EntityTransition
          {static} + NONE : EntityTransition
          {static} + PAUSE : EntityTransition
          {static} + TERMINATE : EntityTransition
          - entityTransition : int
          + EntityTransition()
          + entityTransition()
      }
    }
  }
  

  namespace enstabretagne.simulation.components {
    namespace implementation {
      class enstabretagne.simulation.components.implementation.SimScenario {
          ~ seed : long
          + InterruptIn()
          + SimScenario()
          + canSeeTable()
          + getClassement()
          + getEndDateTime()
          + getEntityToFollow()
          + getRecords()
          + getScenarioId()
          + getSeed()
          + getStartDateTime()
          + getTitles()
          + onParentSet()
          # AfterActivate()
          # AfterDeactivated()
          # AfterTerminated()
          # BeforeActivating()
          # BeforeDeactivating()
          # initializeSimEntity()
          - InterruptAt()
      }
    }
  }
  

  enstabretagne.simulation.components.implementation.SimEntity .up.|> enstabretagne.simulation.components.IEntity
  enstabretagne.simulation.components.implementation.SimEntity -up-|> enstabretagne.simulation.core.implementation.SimObject
  enstabretagne.simulation.components.implementation.SimEntity o-- enstabretagne.simulation.components.data.SimFeatures : features
  enstabretagne.simulation.components.implementation.SimEntity o-- enstabretagne.simulation.components.data.SimInitParameters : initParameters
  enstabretagne.simulation.components.implementation.SimEntity o-- enstabretagne.simulation.components.IEntity : parent
  enstabretagne.simulation.components.implementation.SimEntity o-- enstabretagne.simulation.components.implementation.SimEntity.EntityTransition : currentTransition
  enstabretagne.simulation.components.implementation.SimEntity o-- enstabretagne.simulation.components.implementation.SimEntity.EntityStatus : status
  enstabretagne.simulation.components.implementation.SimEntity +-down- enstabretagne.simulation.components.implementation.SimEntity.EntityStatus
  enstabretagne.simulation.components.implementation.SimEntity +-down- enstabretagne.simulation.components.implementation.SimEntity.EntityTransition
  enstabretagne.simulation.components.implementation.SimScenario .up.|> enstabretagne.base.logger.IRecordable
  enstabretagne.simulation.components.implementation.SimScenario .up.|> enstabretagne.simulation.components.IScenarioIdProvider
  enstabretagne.simulation.components.implementation.SimScenario .up.|> enstabretagne.simulation.core.IScenario
  enstabretagne.simulation.components.implementation.SimScenario -up-|> enstabretagne.simulation.components.implementation.SimEntity
  enstabretagne.simulation.components.implementation.SimScenario o-- enstabretagne.base.time.LogicalDateTime : endDateTime
  enstabretagne.simulation.components.implementation.SimScenario o-- enstabretagne.simulation.components.implementation.SimEntity : entityToFollow
  enstabretagne.simulation.components.implementation.SimScenario o-- enstabretagne.base.time.LogicalDateTime : startDateTime
  enstabretagne.simulation.components.implementation.SimScenario o-- enstabretagne.simulation.components.ScenarioId : scenarioId


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
